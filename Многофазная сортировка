#include <iostream>
#include <vector>

using namespace std;

void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(vector<int>& arr, int left, int right) {
    if (left >= right) return;

    int mid = left + (right - left) / 2;
    mergeSort(arr, left, mid);
    mergeSort(arr, mid + 1, right);
    merge(arr, left, mid, right);
}

void quickSort(vector<int>& arr, int left, int right) {
    if (left >= right) return;

    int pivot = arr[left + (right - left) / 2];
    int i = left, j = right;
    while (i <= j) {
        while (arr[i] < pivot) i++;
        while (arr[j] > pivot) j--;
        if (i <= j) {
            swap(arr[i], arr[j]);
            i++;
            j--;
        }
    }

    if (left < j) quickSort(arr, left, j);
    if (i < right) quickSort(arr, i, right);
}

void multiPhaseSort(vector<int>& arr) {
    int n = arr.size();
    int pivot = n / 2;


    quickSort(arr, 0, pivot - 1);


    mergeSort(arr, pivot, n - 1);


    merge(arr, 0, pivot - 1, n - 1);
}

int main() {
    system("chcp 1251>NULL");
    vector<int> arr = { 12, 11, 13, 5, 6, 7 };
    cout << "Исходный массив: ";
    for (int num = 0; num < 6; num++) {
        cout << arr[num] << " ";
    }
        cout << endl;
    
    multiPhaseSort(arr);

    cout << "Отсортированный массив: ";
    for (int num = 0; num < 6; num++) {
        cout << arr[num] << " ";
    }
    cout << endl;
    
    return 0;
}
