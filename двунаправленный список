#include <iostream>
using namespace std;

struct Node {
    char key;
    Node* next;
    Node* prev;
};

struct List {
    Node* head_node = nullptr;
    Node* tail_node = nullptr;
};

void pushBack(List& list, char key) {
    Node* new_node = new Node;
    new_node->key = key;
    new_node->next = nullptr;
    new_node->prev = list.tail_node;

    if (list.head_node == nullptr) {
        list.head_node = new_node;
    }
    else {
        list.tail_node->next = new_node;
    }

    list.tail_node = new_node;
}

void removeElements(List& list, char key) {
    Node* current = list.head_node;

    while (current != nullptr) {
        if (current->key == key) {
            if (current->prev != nullptr) {
                current->prev->next = current->next;
            }
            else {
                list.head_node = current->next;
            }

            if (current->next != nullptr) {
                current->next->prev = current->prev;
            }
            else {
                list.tail_node = current->prev;
            }

            Node* to_delete = current;
            current = current->next;
            delete to_delete;
        }
        else {
            current = current->next;
        }
    }
}

void InsertItems(List& list, int k) {
    char mass[] = "hijklmnopqrstuvwxyz";
    for (int i = 0; i < k; i++) {
        Node* new_node = new Node;
        new_node->next = list.head_node;
        new_node->prev = nullptr;
        new_node->key = mass[i];
        list.head_node->prev = new_node;
        list.head_node = new_node;
    }

    Node* current = list.head_node;
    while (current->next != nullptr) {
        current = current->next;
    }

    for (int i = 0; i < k; i++) {
        Node* new_node = new Node;
        new_node->next = nullptr;
        new_node->prev = current;
        current->next = new_node;
        current = new_node;
        new_node->key = mass[i];
        list.tail_node = new_node;
    }
}

int main() {
    setlocale(LC_ALL, "Rus");
    List list;
    for (char key = 'a'; key <= 'g'; key++) {
        pushBack(list, key);
    }

    Node* current_node = list.head_node;
    while (current_node != nullptr) {
        cout << current_node->key << ' ';
        current_node = current_node->next;
    }

    cout << endl;
    char g;
    int k;
    cout << "Введите сколько элементов нужно добавить: ";
    cin >> k;

    cout << "Введите символ от a до g, который надо удалить: ";
    cin >> g;
    removeElements(list, g);

    InsertItems(list, k);

    current_node = list.head_node;
    while (current_node != nullptr) {
        cout << current_node->key << ' ';
        current_node = current_node->next;
    }

    return 0;
}
